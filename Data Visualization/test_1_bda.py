# -*- coding: utf-8 -*-
"""Test 1 BDA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C4kNw7Iep4jWQS_11OyBs7uXVBu0UZ3m
"""

from pandas.core.describe import describe_categorical_1d
import pandas as pd
import numpy as np

data1=pd.read_csv('survey data demographics.csv')
data=pd.DataFrame(data=data1)

data.head(3)

data.shape

"""# PREPROCESSING"""

#Get columns names to be choosen
data.columns

#Select columns related to answer research question
columns=['Age','Gender','EdLevel','UndergradMajor','Country','Ethnicity','Employment']
data=data[columns].copy()
data.head(3)

#Basic information about the data
data.shape

"""Here we know that the data has 11398 (included nan values) rows and 7 columns. Now we'll remove nan values."""

#Remove nan values
data=data.dropna()
data.shape

data.info()

"""From the information above, all rows now contain values other than nan.


---

Most of the data are object type either because it contain values of different types or null values.
"""

data['Age'].unique()

#Convert nan values in 'Age' to 0 so that we can convert dtype of 'Age' from float to int
#data['Age'] = data['Age'].fillna(0).astype(int)

#Convert dtype of Age from float to int
pd.options.mode.chained_assignment = None #Disable warning
data['Age'] = data['Age'].astype(int)
data.info()

data['Age'].describe()

"""Now by checking the *Age* min and max value, it seems that the data is make sense as the min age is 16 years old however the max value seems to be not logically right as basically retirement age will be 40-60 years old hence, we will limit the max age to 60 years old."""

pd.options.mode.chained_assignment = None  # default='warn'

#limit the min age to be 12 years old
data.drop(data[data.Age > 60].index, inplace=True)

data['Age'].describe()

data.info()

data['Gender'].unique()

"""Now we will remove rows based on ***Gender*** column that contain value other than *Man* and *Woman* to obtain reasearch objectives"""

data.drop(data[(data.Gender != 'Man') & (data.Gender != 'Woman')].index, inplace=True)
print(data['Gender'].unique())

data.info()

data['Employment'].unique()

data['EdLevel'].unique()

data['UndergradMajor'].unique()

data.shape

data['Ethnicity'].unique()

"""From output above we can see that the data contain more than one value in one row. We could not find out the distribution of how frequently the value was appearing without splitting these cells into individual cells of their own which is creating new rows thus we will seperate the data by ***;*** and create new rows."""

#Create column with list
data.assign(Ethnicity=data.Ethnicity.str.split(";"))

#Now we can use Pandas explode() function to separate list elements into separate rows()
data=data.assign(Ethnicity=data.Ethnicity.str.split(";")).explode('Ethnicity')
data

data.shape

"""Now the number of rows has increased from 9522 to 10284 rows.

# VISUALISATION

**Country**
"""

len(data.Country.unique())

count_country=data.Country.value_counts().head(20)
count_country

"""Since there too many countries to be compared (which are 95 countries), thus we will only take 20 countries to be analyzed."""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(15,10))
#plt.xticks(rotation=90)
plt.title('Number of Developers by Country')
sns.barplot(y=count_country.index, x=count_country)

"""# label"""

count_ethnic=data.Ethnicity.value_counts()
count_ethnic

"""Since we're going to use new feature of bar_label which exist in matplotlib version 3.4 thus we will instal the newest version of matplotlib first."""

plt.figure(figsize=(15,10))
#plt.xticks(rotation=90)
plt.title('Number of Developers by Ethicity')
sns.barplot(y=count_ethnic.index, x=count_ethnic)

sns.scatterplot(x=)

"""# **Age**"""

import plotly.express as px
px.histogram(data, x="Age", marginal="box", title='Age of Developers')

count_gender=data.Gender.value_counts()
count_gender

import numpy as np

plt.figure(figsize=(21,6))
explode_ = [0.3, 0]
colors_=['Yellow','Red']

#gender=[9586, 698]

plt.pie(count_gender, labels = data.Gender.unique(), explode=explode_, shadow=True, colors=colors_, autopct='%1.1f%%',)
plt.legend(title = "Gender")
plt.show()

"""**Educational Background**"""

count_eduLevel=data.EdLevel.value_counts()
count_eduLevel

edLevel=data.EdLevel.unique()

plt.figure(figsize=(15,5))
#plt.xticks(rotation=90)
plt.title('Developers Educational Level')

sns.barplot(y=count_eduLevel.index, x=count_eduLevel)

count_major=data['UndergradMajor'].value_counts()
count_major

plt.figure(figsize=(15,8))
#plt.xticks(rotation=90)
plt.title('Developers Field of Study')

sns.barplot(y=count_major.index, x=count_major)

"""**Employment**"""

count_employ=data.Employment.value_counts()

plt.figure(figsize=(21,6))
explode_ = [0.5, 0]
colors_=['#cce6ff','#0077e6']

#gender=[9586, 698]

plt.pie(count_employ, labels = data.Employment.unique(), explode=explode_, shadow=True, colors=colors_, autopct='%1.1f%%',)
plt.legend(title = "Gender")
plt.show()